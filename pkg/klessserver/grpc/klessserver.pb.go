// Code generated by protoc-gen-go. DO NOT EDIT.
// source: klessserver.proto

/*
Package klessserver is a generated protocol buffer package.

It is generated from these files:
	klessserver.proto

It has these top-level messages:
	GetServerVersionRequest
	GetServerVersionReply
	CreateEventHandlerRequest
	CreateEventHandlerReply
	GetEventHandlersRequest
	EventHandlerInformation
	GetEventHandlerStatisticsRequest
	EventHandlerStatisticsInformation
	DeleteEventHandlerRequest
	DeleteEventHandlerReply
	DescribeEventHandlerRequest
	DescribeEventHandlerReply
	CreateEventHandlerBuilderRequest
	CreateEventHandlerBuilderReply
	GetEventHandlerBuildersRequest
	EventHandlerBuilderInformation
	DeleteEventHandlerBuilderRequest
	DeleteEventHandlerBuilderReply
	CreateEventHandlerFrontendRequest
	CreateEventHandlerFrontendReply
	GetEventHandlerFrontendsRequest
	FrontendInformation
	DeleteEventHandlerFrontendRequest
	DeleteEventHandlerFrontendReply
	CreateEventHandlerFrontendTypeRequest
	CreateEventHandlerFrontendTypeReply
	GetEventHandlerFrontendTypesRequest
	FrontendTypeInformation
	DeleteEventHandlerFrontendTypeRequest
	DeleteEventHandlerFrontendTypeReply
*/
package klessserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetServerVersionRequest struct {
	Clientversion string `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
}

func (m *GetServerVersionRequest) Reset()                    { *m = GetServerVersionRequest{} }
func (m *GetServerVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServerVersionRequest) ProtoMessage()               {}
func (*GetServerVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetServerVersionRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

type GetServerVersionReply struct {
	Serverversion string `protobuf:"bytes,1,opt,name=serverversion" json:"serverversion,omitempty"`
}

func (m *GetServerVersionReply) Reset()                    { *m = GetServerVersionReply{} }
func (m *GetServerVersionReply) String() string            { return proto.CompactTextString(m) }
func (*GetServerVersionReply) ProtoMessage()               {}
func (*GetServerVersionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetServerVersionReply) GetServerversion() string {
	if m != nil {
		return m.Serverversion
	}
	return ""
}

type CreateEventHandlerRequest struct {
	Clientversion               string `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
	EventHandlerName            string `protobuf:"bytes,2,opt,name=eventHandlerName" json:"eventHandlerName,omitempty"`
	EventHandlerNamespace       string `protobuf:"bytes,3,opt,name=eventHandlerNamespace" json:"eventHandlerNamespace,omitempty"`
	EventHandlerBuilder         string `protobuf:"bytes,4,opt,name=eventHandlerBuilder" json:"eventHandlerBuilder,omitempty"`
	EventHandlerSourceCode      []byte `protobuf:"bytes,5,opt,name=eventHandlerSourceCode,proto3" json:"eventHandlerSourceCode,omitempty"`
	EventHandlerSourceCodeURL   string `protobuf:"bytes,6,opt,name=eventHandlerSourceCodeURL" json:"eventHandlerSourceCodeURL,omitempty"`
	EventHandlerVersion         string `protobuf:"bytes,7,opt,name=eventHandlerVersion" json:"eventHandlerVersion,omitempty"`
	EventHandlerFrontend        string `protobuf:"bytes,8,opt,name=eventHandlerFrontend" json:"eventHandlerFrontend,omitempty"`
	EventHandlerDependencies    []byte `protobuf:"bytes,9,opt,name=eventHandlerDependencies,proto3" json:"eventHandlerDependencies,omitempty"`
	EventHandlerDependenciesURL string `protobuf:"bytes,10,opt,name=eventHandlerDependenciesURL" json:"eventHandlerDependenciesURL,omitempty"`
	Comment                     string `protobuf:"bytes,11,opt,name=comment" json:"comment,omitempty"`
}

func (m *CreateEventHandlerRequest) Reset()                    { *m = CreateEventHandlerRequest{} }
func (m *CreateEventHandlerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateEventHandlerRequest) ProtoMessage()               {}
func (*CreateEventHandlerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateEventHandlerRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

func (m *CreateEventHandlerRequest) GetEventHandlerName() string {
	if m != nil {
		return m.EventHandlerName
	}
	return ""
}

func (m *CreateEventHandlerRequest) GetEventHandlerNamespace() string {
	if m != nil {
		return m.EventHandlerNamespace
	}
	return ""
}

func (m *CreateEventHandlerRequest) GetEventHandlerBuilder() string {
	if m != nil {
		return m.EventHandlerBuilder
	}
	return ""
}

func (m *CreateEventHandlerRequest) GetEventHandlerSourceCode() []byte {
	if m != nil {
		return m.EventHandlerSourceCode
	}
	return nil
}

func (m *CreateEventHandlerRequest) GetEventHandlerSourceCodeURL() string {
	if m != nil {
		return m.EventHandlerSourceCodeURL
	}
	return ""
}

func (m *CreateEventHandlerRequest) GetEventHandlerVersion() string {
	if m != nil {
		return m.EventHandlerVersion
	}
	return ""
}

func (m *CreateEventHandlerRequest) GetEventHandlerFrontend() string {
	if m != nil {
		return m.EventHandlerFrontend
	}
	return ""
}

func (m *CreateEventHandlerRequest) GetEventHandlerDependencies() []byte {
	if m != nil {
		return m.EventHandlerDependencies
	}
	return nil
}

func (m *CreateEventHandlerRequest) GetEventHandlerDependenciesURL() string {
	if m != nil {
		return m.EventHandlerDependenciesURL
	}
	return ""
}

func (m *CreateEventHandlerRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type CreateEventHandlerReply struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *CreateEventHandlerReply) Reset()                    { *m = CreateEventHandlerReply{} }
func (m *CreateEventHandlerReply) String() string            { return proto.CompactTextString(m) }
func (*CreateEventHandlerReply) ProtoMessage()               {}
func (*CreateEventHandlerReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateEventHandlerReply) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type GetEventHandlersRequest struct {
	Clientversion         string `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
	EventHandlerNamespace string `protobuf:"bytes,2,opt,name=eventHandlerNamespace" json:"eventHandlerNamespace,omitempty"`
}

func (m *GetEventHandlersRequest) Reset()                    { *m = GetEventHandlersRequest{} }
func (m *GetEventHandlersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEventHandlersRequest) ProtoMessage()               {}
func (*GetEventHandlersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetEventHandlersRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

func (m *GetEventHandlersRequest) GetEventHandlerNamespace() string {
	if m != nil {
		return m.EventHandlerNamespace
	}
	return ""
}

type EventHandlerInformation struct {
	EventHandlerId         string `protobuf:"bytes,1,opt,name=eventHandlerId" json:"eventHandlerId,omitempty"`
	EventHandlerName       string `protobuf:"bytes,2,opt,name=eventHandlerName" json:"eventHandlerName,omitempty"`
	EventHandlerNamespace  string `protobuf:"bytes,3,opt,name=eventHandlerNamespace" json:"eventHandlerNamespace,omitempty"`
	EventHandlerVersion    string `protobuf:"bytes,4,opt,name=eventHandlerVersion" json:"eventHandlerVersion,omitempty"`
	EventHandlerBuilder    string `protobuf:"bytes,5,opt,name=eventHandlerBuilder" json:"eventHandlerBuilder,omitempty"`
	EventHandlerBuilderURL string `protobuf:"bytes,6,opt,name=eventHandlerBuilderURL" json:"eventHandlerBuilderURL,omitempty"`
	Frontend               string `protobuf:"bytes,7,opt,name=frontend" json:"frontend,omitempty"`
	Comment                string `protobuf:"bytes,8,opt,name=comment" json:"comment,omitempty"`
	BuildStatus            string `protobuf:"bytes,9,opt,name=buildStatus" json:"buildStatus,omitempty"`
	EventHandlerAvailable  string `protobuf:"bytes,10,opt,name=eventHandlerAvailable" json:"eventHandlerAvailable,omitempty"`
}

func (m *EventHandlerInformation) Reset()                    { *m = EventHandlerInformation{} }
func (m *EventHandlerInformation) String() string            { return proto.CompactTextString(m) }
func (*EventHandlerInformation) ProtoMessage()               {}
func (*EventHandlerInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EventHandlerInformation) GetEventHandlerId() string {
	if m != nil {
		return m.EventHandlerId
	}
	return ""
}

func (m *EventHandlerInformation) GetEventHandlerName() string {
	if m != nil {
		return m.EventHandlerName
	}
	return ""
}

func (m *EventHandlerInformation) GetEventHandlerNamespace() string {
	if m != nil {
		return m.EventHandlerNamespace
	}
	return ""
}

func (m *EventHandlerInformation) GetEventHandlerVersion() string {
	if m != nil {
		return m.EventHandlerVersion
	}
	return ""
}

func (m *EventHandlerInformation) GetEventHandlerBuilder() string {
	if m != nil {
		return m.EventHandlerBuilder
	}
	return ""
}

func (m *EventHandlerInformation) GetEventHandlerBuilderURL() string {
	if m != nil {
		return m.EventHandlerBuilderURL
	}
	return ""
}

func (m *EventHandlerInformation) GetFrontend() string {
	if m != nil {
		return m.Frontend
	}
	return ""
}

func (m *EventHandlerInformation) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *EventHandlerInformation) GetBuildStatus() string {
	if m != nil {
		return m.BuildStatus
	}
	return ""
}

func (m *EventHandlerInformation) GetEventHandlerAvailable() string {
	if m != nil {
		return m.EventHandlerAvailable
	}
	return ""
}

type GetEventHandlerStatisticsRequest struct {
	Clientversion         string `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
	EventHandlerNamespace string `protobuf:"bytes,2,opt,name=eventHandlerNamespace" json:"eventHandlerNamespace,omitempty"`
	EventHandlerName      string `protobuf:"bytes,3,opt,name=eventHandlerName" json:"eventHandlerName,omitempty"`
	StartTime             string `protobuf:"bytes,4,opt,name=startTime" json:"startTime,omitempty"`
	EndTime               string `protobuf:"bytes,5,opt,name=endTime" json:"endTime,omitempty"`
	Summary               bool   `protobuf:"varint,6,opt,name=summary" json:"summary,omitempty"`
}

func (m *GetEventHandlerStatisticsRequest) Reset()         { *m = GetEventHandlerStatisticsRequest{} }
func (m *GetEventHandlerStatisticsRequest) String() string { return proto.CompactTextString(m) }
func (*GetEventHandlerStatisticsRequest) ProtoMessage()    {}
func (*GetEventHandlerStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6}
}

func (m *GetEventHandlerStatisticsRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

func (m *GetEventHandlerStatisticsRequest) GetEventHandlerNamespace() string {
	if m != nil {
		return m.EventHandlerNamespace
	}
	return ""
}

func (m *GetEventHandlerStatisticsRequest) GetEventHandlerName() string {
	if m != nil {
		return m.EventHandlerName
	}
	return ""
}

func (m *GetEventHandlerStatisticsRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *GetEventHandlerStatisticsRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *GetEventHandlerStatisticsRequest) GetSummary() bool {
	if m != nil {
		return m.Summary
	}
	return false
}

type EventHandlerStatisticsInformation struct {
	Timestamp             string `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	EventHandlerName      string `protobuf:"bytes,2,opt,name=eventHandlerName" json:"eventHandlerName,omitempty"`
	EventHandlerNamespace string `protobuf:"bytes,3,opt,name=eventHandlerNamespace" json:"eventHandlerNamespace,omitempty"`
	EventHandlerVersion   string `protobuf:"bytes,4,opt,name=eventHandlerVersion" json:"eventHandlerVersion,omitempty"`
	PodName               string `protobuf:"bytes,5,opt,name=podName" json:"podName,omitempty"`
	RequestSize           int64  `protobuf:"varint,6,opt,name=requestSize" json:"requestSize,omitempty"`
	ResponseSize          int64  `protobuf:"varint,7,opt,name=responseSize" json:"responseSize,omitempty"`
	ResponseTime          int64  `protobuf:"varint,8,opt,name=responseTime" json:"responseTime,omitempty"`
}

func (m *EventHandlerStatisticsInformation) Reset()         { *m = EventHandlerStatisticsInformation{} }
func (m *EventHandlerStatisticsInformation) String() string { return proto.CompactTextString(m) }
func (*EventHandlerStatisticsInformation) ProtoMessage()    {}
func (*EventHandlerStatisticsInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7}
}

func (m *EventHandlerStatisticsInformation) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *EventHandlerStatisticsInformation) GetEventHandlerName() string {
	if m != nil {
		return m.EventHandlerName
	}
	return ""
}

func (m *EventHandlerStatisticsInformation) GetEventHandlerNamespace() string {
	if m != nil {
		return m.EventHandlerNamespace
	}
	return ""
}

func (m *EventHandlerStatisticsInformation) GetEventHandlerVersion() string {
	if m != nil {
		return m.EventHandlerVersion
	}
	return ""
}

func (m *EventHandlerStatisticsInformation) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *EventHandlerStatisticsInformation) GetRequestSize() int64 {
	if m != nil {
		return m.RequestSize
	}
	return 0
}

func (m *EventHandlerStatisticsInformation) GetResponseSize() int64 {
	if m != nil {
		return m.ResponseSize
	}
	return 0
}

func (m *EventHandlerStatisticsInformation) GetResponseTime() int64 {
	if m != nil {
		return m.ResponseTime
	}
	return 0
}

type DeleteEventHandlerRequest struct {
	Clientversion         string `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
	EventHandlerName      string `protobuf:"bytes,2,opt,name=eventHandlerName" json:"eventHandlerName,omitempty"`
	EventHandlerNamespace string `protobuf:"bytes,3,opt,name=eventHandlerNamespace" json:"eventHandlerNamespace,omitempty"`
	EventHandlerVersion   string `protobuf:"bytes,4,opt,name=eventHandlerVersion" json:"eventHandlerVersion,omitempty"`
	Comment               string `protobuf:"bytes,5,opt,name=comment" json:"comment,omitempty"`
}

func (m *DeleteEventHandlerRequest) Reset()                    { *m = DeleteEventHandlerRequest{} }
func (m *DeleteEventHandlerRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteEventHandlerRequest) ProtoMessage()               {}
func (*DeleteEventHandlerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteEventHandlerRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

func (m *DeleteEventHandlerRequest) GetEventHandlerName() string {
	if m != nil {
		return m.EventHandlerName
	}
	return ""
}

func (m *DeleteEventHandlerRequest) GetEventHandlerNamespace() string {
	if m != nil {
		return m.EventHandlerNamespace
	}
	return ""
}

func (m *DeleteEventHandlerRequest) GetEventHandlerVersion() string {
	if m != nil {
		return m.EventHandlerVersion
	}
	return ""
}

func (m *DeleteEventHandlerRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type DeleteEventHandlerReply struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *DeleteEventHandlerReply) Reset()                    { *m = DeleteEventHandlerReply{} }
func (m *DeleteEventHandlerReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteEventHandlerReply) ProtoMessage()               {}
func (*DeleteEventHandlerReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteEventHandlerReply) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type DescribeEventHandlerRequest struct {
	Clientversion         string `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
	EventHandlerName      string `protobuf:"bytes,2,opt,name=eventHandlerName" json:"eventHandlerName,omitempty"`
	EventHandlerNamespace string `protobuf:"bytes,3,opt,name=eventHandlerNamespace" json:"eventHandlerNamespace,omitempty"`
	EventHandlerVersion   string `protobuf:"bytes,4,opt,name=eventHandlerVersion" json:"eventHandlerVersion,omitempty"`
}

func (m *DescribeEventHandlerRequest) Reset()                    { *m = DescribeEventHandlerRequest{} }
func (m *DescribeEventHandlerRequest) String() string            { return proto.CompactTextString(m) }
func (*DescribeEventHandlerRequest) ProtoMessage()               {}
func (*DescribeEventHandlerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DescribeEventHandlerRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

func (m *DescribeEventHandlerRequest) GetEventHandlerName() string {
	if m != nil {
		return m.EventHandlerName
	}
	return ""
}

func (m *DescribeEventHandlerRequest) GetEventHandlerNamespace() string {
	if m != nil {
		return m.EventHandlerNamespace
	}
	return ""
}

func (m *DescribeEventHandlerRequest) GetEventHandlerVersion() string {
	if m != nil {
		return m.EventHandlerVersion
	}
	return ""
}

type DescribeEventHandlerReply struct {
	Response                string                   `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	EventHandlerInformation *EventHandlerInformation `protobuf:"bytes,2,opt,name=eventHandlerInformation" json:"eventHandlerInformation,omitempty"`
	SourceCode              []byte                   `protobuf:"bytes,3,opt,name=sourceCode,proto3" json:"sourceCode,omitempty"`
	BuildOutput             []byte                   `protobuf:"bytes,4,opt,name=buildOutput,proto3" json:"buildOutput,omitempty"`
}

func (m *DescribeEventHandlerReply) Reset()                    { *m = DescribeEventHandlerReply{} }
func (m *DescribeEventHandlerReply) String() string            { return proto.CompactTextString(m) }
func (*DescribeEventHandlerReply) ProtoMessage()               {}
func (*DescribeEventHandlerReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DescribeEventHandlerReply) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *DescribeEventHandlerReply) GetEventHandlerInformation() *EventHandlerInformation {
	if m != nil {
		return m.EventHandlerInformation
	}
	return nil
}

func (m *DescribeEventHandlerReply) GetSourceCode() []byte {
	if m != nil {
		return m.SourceCode
	}
	return nil
}

func (m *DescribeEventHandlerReply) GetBuildOutput() []byte {
	if m != nil {
		return m.BuildOutput
	}
	return nil
}

type CreateEventHandlerBuilderRequest struct {
	Clientversion                  string            `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
	EventHandlerBuilderName        string            `protobuf:"bytes,2,opt,name=eventHandlerBuilderName" json:"eventHandlerBuilderName,omitempty"`
	EventHandlerBuilderURL         string            `protobuf:"bytes,3,opt,name=eventHandlerBuilderURL" json:"eventHandlerBuilderURL,omitempty"`
	EventHandlerBuilderInformation map[string][]byte `protobuf:"bytes,4,rep,name=eventHandlerBuilderInformation" json:"eventHandlerBuilderInformation,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Comment                        string            `protobuf:"bytes,5,opt,name=comment" json:"comment,omitempty"`
}

func (m *CreateEventHandlerBuilderRequest) Reset()         { *m = CreateEventHandlerBuilderRequest{} }
func (m *CreateEventHandlerBuilderRequest) String() string { return proto.CompactTextString(m) }
func (*CreateEventHandlerBuilderRequest) ProtoMessage()    {}
func (*CreateEventHandlerBuilderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12}
}

func (m *CreateEventHandlerBuilderRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

func (m *CreateEventHandlerBuilderRequest) GetEventHandlerBuilderName() string {
	if m != nil {
		return m.EventHandlerBuilderName
	}
	return ""
}

func (m *CreateEventHandlerBuilderRequest) GetEventHandlerBuilderURL() string {
	if m != nil {
		return m.EventHandlerBuilderURL
	}
	return ""
}

func (m *CreateEventHandlerBuilderRequest) GetEventHandlerBuilderInformation() map[string][]byte {
	if m != nil {
		return m.EventHandlerBuilderInformation
	}
	return nil
}

func (m *CreateEventHandlerBuilderRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type CreateEventHandlerBuilderReply struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *CreateEventHandlerBuilderReply) Reset()                    { *m = CreateEventHandlerBuilderReply{} }
func (m *CreateEventHandlerBuilderReply) String() string            { return proto.CompactTextString(m) }
func (*CreateEventHandlerBuilderReply) ProtoMessage()               {}
func (*CreateEventHandlerBuilderReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateEventHandlerBuilderReply) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type GetEventHandlerBuildersRequest struct {
	Clientversion string `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
}

func (m *GetEventHandlerBuildersRequest) Reset()                    { *m = GetEventHandlerBuildersRequest{} }
func (m *GetEventHandlerBuildersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEventHandlerBuildersRequest) ProtoMessage()               {}
func (*GetEventHandlerBuildersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetEventHandlerBuildersRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

type EventHandlerBuilderInformation struct {
	EventHandlerBuilderName string `protobuf:"bytes,1,opt,name=eventHandlerBuilderName" json:"eventHandlerBuilderName,omitempty"`
	EventHandlerBuilderURL  string `protobuf:"bytes,2,opt,name=eventHandlerBuilderURL" json:"eventHandlerBuilderURL,omitempty"`
	Comment                 string `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
}

func (m *EventHandlerBuilderInformation) Reset()                    { *m = EventHandlerBuilderInformation{} }
func (m *EventHandlerBuilderInformation) String() string            { return proto.CompactTextString(m) }
func (*EventHandlerBuilderInformation) ProtoMessage()               {}
func (*EventHandlerBuilderInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EventHandlerBuilderInformation) GetEventHandlerBuilderName() string {
	if m != nil {
		return m.EventHandlerBuilderName
	}
	return ""
}

func (m *EventHandlerBuilderInformation) GetEventHandlerBuilderURL() string {
	if m != nil {
		return m.EventHandlerBuilderURL
	}
	return ""
}

func (m *EventHandlerBuilderInformation) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type DeleteEventHandlerBuilderRequest struct {
	Clientversion           string `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
	EventHandlerBuilderName string `protobuf:"bytes,2,opt,name=eventHandlerBuilderName" json:"eventHandlerBuilderName,omitempty"`
	Comment                 string `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
}

func (m *DeleteEventHandlerBuilderRequest) Reset()         { *m = DeleteEventHandlerBuilderRequest{} }
func (m *DeleteEventHandlerBuilderRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteEventHandlerBuilderRequest) ProtoMessage()    {}
func (*DeleteEventHandlerBuilderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16}
}

func (m *DeleteEventHandlerBuilderRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

func (m *DeleteEventHandlerBuilderRequest) GetEventHandlerBuilderName() string {
	if m != nil {
		return m.EventHandlerBuilderName
	}
	return ""
}

func (m *DeleteEventHandlerBuilderRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type DeleteEventHandlerBuilderReply struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *DeleteEventHandlerBuilderReply) Reset()                    { *m = DeleteEventHandlerBuilderReply{} }
func (m *DeleteEventHandlerBuilderReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteEventHandlerBuilderReply) ProtoMessage()               {}
func (*DeleteEventHandlerBuilderReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DeleteEventHandlerBuilderReply) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type CreateEventHandlerFrontendRequest struct {
	Clientversion                   string            `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
	EventHandlerFrontendName        string            `protobuf:"bytes,2,opt,name=eventHandlerFrontendName" json:"eventHandlerFrontendName,omitempty"`
	EventHandlerFrontendType        string            `protobuf:"bytes,3,opt,name=eventHandlerFrontendType" json:"eventHandlerFrontendType,omitempty"`
	EventHandlerFrontendInformation map[string]string `protobuf:"bytes,4,rep,name=eventHandlerFrontendInformation" json:"eventHandlerFrontendInformation,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EventHandlerFrontendSecret      string            `protobuf:"bytes,5,opt,name=eventHandlerFrontendSecret" json:"eventHandlerFrontendSecret,omitempty"`
	Comment                         string            `protobuf:"bytes,6,opt,name=comment" json:"comment,omitempty"`
}

func (m *CreateEventHandlerFrontendRequest) Reset()         { *m = CreateEventHandlerFrontendRequest{} }
func (m *CreateEventHandlerFrontendRequest) String() string { return proto.CompactTextString(m) }
func (*CreateEventHandlerFrontendRequest) ProtoMessage()    {}
func (*CreateEventHandlerFrontendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18}
}

func (m *CreateEventHandlerFrontendRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

func (m *CreateEventHandlerFrontendRequest) GetEventHandlerFrontendName() string {
	if m != nil {
		return m.EventHandlerFrontendName
	}
	return ""
}

func (m *CreateEventHandlerFrontendRequest) GetEventHandlerFrontendType() string {
	if m != nil {
		return m.EventHandlerFrontendType
	}
	return ""
}

func (m *CreateEventHandlerFrontendRequest) GetEventHandlerFrontendInformation() map[string]string {
	if m != nil {
		return m.EventHandlerFrontendInformation
	}
	return nil
}

func (m *CreateEventHandlerFrontendRequest) GetEventHandlerFrontendSecret() string {
	if m != nil {
		return m.EventHandlerFrontendSecret
	}
	return ""
}

func (m *CreateEventHandlerFrontendRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type CreateEventHandlerFrontendReply struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *CreateEventHandlerFrontendReply) Reset()         { *m = CreateEventHandlerFrontendReply{} }
func (m *CreateEventHandlerFrontendReply) String() string { return proto.CompactTextString(m) }
func (*CreateEventHandlerFrontendReply) ProtoMessage()    {}
func (*CreateEventHandlerFrontendReply) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19}
}

func (m *CreateEventHandlerFrontendReply) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type GetEventHandlerFrontendsRequest struct {
	Clientversion string `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
}

func (m *GetEventHandlerFrontendsRequest) Reset()         { *m = GetEventHandlerFrontendsRequest{} }
func (m *GetEventHandlerFrontendsRequest) String() string { return proto.CompactTextString(m) }
func (*GetEventHandlerFrontendsRequest) ProtoMessage()    {}
func (*GetEventHandlerFrontendsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20}
}

func (m *GetEventHandlerFrontendsRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

type FrontendInformation struct {
	EventHandlerFrontendName string `protobuf:"bytes,1,opt,name=eventHandlerFrontendName" json:"eventHandlerFrontendName,omitempty"`
	EventHandlerFrontendType string `protobuf:"bytes,2,opt,name=eventHandlerFrontendType" json:"eventHandlerFrontendType,omitempty"`
	Comment                  string `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
}

func (m *FrontendInformation) Reset()                    { *m = FrontendInformation{} }
func (m *FrontendInformation) String() string            { return proto.CompactTextString(m) }
func (*FrontendInformation) ProtoMessage()               {}
func (*FrontendInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *FrontendInformation) GetEventHandlerFrontendName() string {
	if m != nil {
		return m.EventHandlerFrontendName
	}
	return ""
}

func (m *FrontendInformation) GetEventHandlerFrontendType() string {
	if m != nil {
		return m.EventHandlerFrontendType
	}
	return ""
}

func (m *FrontendInformation) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type DeleteEventHandlerFrontendRequest struct {
	Clientversion            string `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
	EventHandlerFrontendName string `protobuf:"bytes,2,opt,name=eventHandlerFrontendName" json:"eventHandlerFrontendName,omitempty"`
	Comment                  string `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
}

func (m *DeleteEventHandlerFrontendRequest) Reset()         { *m = DeleteEventHandlerFrontendRequest{} }
func (m *DeleteEventHandlerFrontendRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteEventHandlerFrontendRequest) ProtoMessage()    {}
func (*DeleteEventHandlerFrontendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22}
}

func (m *DeleteEventHandlerFrontendRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

func (m *DeleteEventHandlerFrontendRequest) GetEventHandlerFrontendName() string {
	if m != nil {
		return m.EventHandlerFrontendName
	}
	return ""
}

func (m *DeleteEventHandlerFrontendRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type DeleteEventHandlerFrontendReply struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *DeleteEventHandlerFrontendReply) Reset()         { *m = DeleteEventHandlerFrontendReply{} }
func (m *DeleteEventHandlerFrontendReply) String() string { return proto.CompactTextString(m) }
func (*DeleteEventHandlerFrontendReply) ProtoMessage()    {}
func (*DeleteEventHandlerFrontendReply) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23}
}

func (m *DeleteEventHandlerFrontendReply) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type CreateEventHandlerFrontendTypeRequest struct {
	Clientversion               string `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
	EventHandlerFrontendType    string `protobuf:"bytes,2,opt,name=eventHandlerFrontendType" json:"eventHandlerFrontendType,omitempty"`
	EventHandlerFrontendTypeURL string `protobuf:"bytes,3,opt,name=eventHandlerFrontendTypeURL" json:"eventHandlerFrontendTypeURL,omitempty"`
	Comment                     string `protobuf:"bytes,4,opt,name=comment" json:"comment,omitempty"`
}

func (m *CreateEventHandlerFrontendTypeRequest) Reset()         { *m = CreateEventHandlerFrontendTypeRequest{} }
func (m *CreateEventHandlerFrontendTypeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateEventHandlerFrontendTypeRequest) ProtoMessage()    {}
func (*CreateEventHandlerFrontendTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24}
}

func (m *CreateEventHandlerFrontendTypeRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

func (m *CreateEventHandlerFrontendTypeRequest) GetEventHandlerFrontendType() string {
	if m != nil {
		return m.EventHandlerFrontendType
	}
	return ""
}

func (m *CreateEventHandlerFrontendTypeRequest) GetEventHandlerFrontendTypeURL() string {
	if m != nil {
		return m.EventHandlerFrontendTypeURL
	}
	return ""
}

func (m *CreateEventHandlerFrontendTypeRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type CreateEventHandlerFrontendTypeReply struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *CreateEventHandlerFrontendTypeReply) Reset()         { *m = CreateEventHandlerFrontendTypeReply{} }
func (m *CreateEventHandlerFrontendTypeReply) String() string { return proto.CompactTextString(m) }
func (*CreateEventHandlerFrontendTypeReply) ProtoMessage()    {}
func (*CreateEventHandlerFrontendTypeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25}
}

func (m *CreateEventHandlerFrontendTypeReply) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type GetEventHandlerFrontendTypesRequest struct {
	Clientversion string `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
}

func (m *GetEventHandlerFrontendTypesRequest) Reset()         { *m = GetEventHandlerFrontendTypesRequest{} }
func (m *GetEventHandlerFrontendTypesRequest) String() string { return proto.CompactTextString(m) }
func (*GetEventHandlerFrontendTypesRequest) ProtoMessage()    {}
func (*GetEventHandlerFrontendTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26}
}

func (m *GetEventHandlerFrontendTypesRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

type FrontendTypeInformation struct {
	EventHandlerFrontendType    string `protobuf:"bytes,1,opt,name=eventHandlerFrontendType" json:"eventHandlerFrontendType,omitempty"`
	EventHandlerFrontendTypeURL string `protobuf:"bytes,2,opt,name=eventHandlerFrontendTypeURL" json:"eventHandlerFrontendTypeURL,omitempty"`
	Comment                     string `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
}

func (m *FrontendTypeInformation) Reset()                    { *m = FrontendTypeInformation{} }
func (m *FrontendTypeInformation) String() string            { return proto.CompactTextString(m) }
func (*FrontendTypeInformation) ProtoMessage()               {}
func (*FrontendTypeInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *FrontendTypeInformation) GetEventHandlerFrontendType() string {
	if m != nil {
		return m.EventHandlerFrontendType
	}
	return ""
}

func (m *FrontendTypeInformation) GetEventHandlerFrontendTypeURL() string {
	if m != nil {
		return m.EventHandlerFrontendTypeURL
	}
	return ""
}

func (m *FrontendTypeInformation) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type DeleteEventHandlerFrontendTypeRequest struct {
	Clientversion            string `protobuf:"bytes,1,opt,name=clientversion" json:"clientversion,omitempty"`
	EventHandlerFrontendType string `protobuf:"bytes,2,opt,name=eventHandlerFrontendType" json:"eventHandlerFrontendType,omitempty"`
	Comment                  string `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
}

func (m *DeleteEventHandlerFrontendTypeRequest) Reset()         { *m = DeleteEventHandlerFrontendTypeRequest{} }
func (m *DeleteEventHandlerFrontendTypeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteEventHandlerFrontendTypeRequest) ProtoMessage()    {}
func (*DeleteEventHandlerFrontendTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{28}
}

func (m *DeleteEventHandlerFrontendTypeRequest) GetClientversion() string {
	if m != nil {
		return m.Clientversion
	}
	return ""
}

func (m *DeleteEventHandlerFrontendTypeRequest) GetEventHandlerFrontendType() string {
	if m != nil {
		return m.EventHandlerFrontendType
	}
	return ""
}

func (m *DeleteEventHandlerFrontendTypeRequest) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type DeleteEventHandlerFrontendTypeReply struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *DeleteEventHandlerFrontendTypeReply) Reset()         { *m = DeleteEventHandlerFrontendTypeReply{} }
func (m *DeleteEventHandlerFrontendTypeReply) String() string { return proto.CompactTextString(m) }
func (*DeleteEventHandlerFrontendTypeReply) ProtoMessage()    {}
func (*DeleteEventHandlerFrontendTypeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29}
}

func (m *DeleteEventHandlerFrontendTypeReply) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*GetServerVersionRequest)(nil), "klessserver.GetServerVersionRequest")
	proto.RegisterType((*GetServerVersionReply)(nil), "klessserver.GetServerVersionReply")
	proto.RegisterType((*CreateEventHandlerRequest)(nil), "klessserver.CreateEventHandlerRequest")
	proto.RegisterType((*CreateEventHandlerReply)(nil), "klessserver.CreateEventHandlerReply")
	proto.RegisterType((*GetEventHandlersRequest)(nil), "klessserver.GetEventHandlersRequest")
	proto.RegisterType((*EventHandlerInformation)(nil), "klessserver.EventHandlerInformation")
	proto.RegisterType((*GetEventHandlerStatisticsRequest)(nil), "klessserver.GetEventHandlerStatisticsRequest")
	proto.RegisterType((*EventHandlerStatisticsInformation)(nil), "klessserver.EventHandlerStatisticsInformation")
	proto.RegisterType((*DeleteEventHandlerRequest)(nil), "klessserver.DeleteEventHandlerRequest")
	proto.RegisterType((*DeleteEventHandlerReply)(nil), "klessserver.DeleteEventHandlerReply")
	proto.RegisterType((*DescribeEventHandlerRequest)(nil), "klessserver.DescribeEventHandlerRequest")
	proto.RegisterType((*DescribeEventHandlerReply)(nil), "klessserver.DescribeEventHandlerReply")
	proto.RegisterType((*CreateEventHandlerBuilderRequest)(nil), "klessserver.CreateEventHandlerBuilderRequest")
	proto.RegisterType((*CreateEventHandlerBuilderReply)(nil), "klessserver.CreateEventHandlerBuilderReply")
	proto.RegisterType((*GetEventHandlerBuildersRequest)(nil), "klessserver.GetEventHandlerBuildersRequest")
	proto.RegisterType((*EventHandlerBuilderInformation)(nil), "klessserver.EventHandlerBuilderInformation")
	proto.RegisterType((*DeleteEventHandlerBuilderRequest)(nil), "klessserver.DeleteEventHandlerBuilderRequest")
	proto.RegisterType((*DeleteEventHandlerBuilderReply)(nil), "klessserver.DeleteEventHandlerBuilderReply")
	proto.RegisterType((*CreateEventHandlerFrontendRequest)(nil), "klessserver.CreateEventHandlerFrontendRequest")
	proto.RegisterType((*CreateEventHandlerFrontendReply)(nil), "klessserver.CreateEventHandlerFrontendReply")
	proto.RegisterType((*GetEventHandlerFrontendsRequest)(nil), "klessserver.GetEventHandlerFrontendsRequest")
	proto.RegisterType((*FrontendInformation)(nil), "klessserver.FrontendInformation")
	proto.RegisterType((*DeleteEventHandlerFrontendRequest)(nil), "klessserver.DeleteEventHandlerFrontendRequest")
	proto.RegisterType((*DeleteEventHandlerFrontendReply)(nil), "klessserver.DeleteEventHandlerFrontendReply")
	proto.RegisterType((*CreateEventHandlerFrontendTypeRequest)(nil), "klessserver.CreateEventHandlerFrontendTypeRequest")
	proto.RegisterType((*CreateEventHandlerFrontendTypeReply)(nil), "klessserver.CreateEventHandlerFrontendTypeReply")
	proto.RegisterType((*GetEventHandlerFrontendTypesRequest)(nil), "klessserver.GetEventHandlerFrontendTypesRequest")
	proto.RegisterType((*FrontendTypeInformation)(nil), "klessserver.FrontendTypeInformation")
	proto.RegisterType((*DeleteEventHandlerFrontendTypeRequest)(nil), "klessserver.DeleteEventHandlerFrontendTypeRequest")
	proto.RegisterType((*DeleteEventHandlerFrontendTypeReply)(nil), "klessserver.DeleteEventHandlerFrontendTypeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KlessAPI service

type KlessAPIClient interface {
	// Version API
	GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionReply, error)
	// Event handler API
	CreateEventHandler(ctx context.Context, in *CreateEventHandlerRequest, opts ...grpc.CallOption) (*CreateEventHandlerReply, error)
	GetEventHandlers(ctx context.Context, in *GetEventHandlersRequest, opts ...grpc.CallOption) (KlessAPI_GetEventHandlersClient, error)
	GetEventHandlerStatistics(ctx context.Context, in *GetEventHandlerStatisticsRequest, opts ...grpc.CallOption) (KlessAPI_GetEventHandlerStatisticsClient, error)
	DeleteEventHandler(ctx context.Context, in *DeleteEventHandlerRequest, opts ...grpc.CallOption) (*DeleteEventHandlerReply, error)
	DescribeEventHandler(ctx context.Context, in *DescribeEventHandlerRequest, opts ...grpc.CallOption) (*DescribeEventHandlerReply, error)
	// Event handler builder API
	CreateEventHandlerBuilder(ctx context.Context, in *CreateEventHandlerBuilderRequest, opts ...grpc.CallOption) (*CreateEventHandlerBuilderReply, error)
	GetEventHandlerBuilders(ctx context.Context, in *GetEventHandlerBuildersRequest, opts ...grpc.CallOption) (KlessAPI_GetEventHandlerBuildersClient, error)
	DeleteEventHandlerBuilder(ctx context.Context, in *DeleteEventHandlerBuilderRequest, opts ...grpc.CallOption) (*DeleteEventHandlerBuilderReply, error)
	// Event handler frontend API
	CreateEventHandlerFrontend(ctx context.Context, in *CreateEventHandlerFrontendRequest, opts ...grpc.CallOption) (*CreateEventHandlerFrontendReply, error)
	GetEventHandlerFrontends(ctx context.Context, in *GetEventHandlerFrontendsRequest, opts ...grpc.CallOption) (KlessAPI_GetEventHandlerFrontendsClient, error)
	DeleteEventHandlerFrontend(ctx context.Context, in *DeleteEventHandlerFrontendRequest, opts ...grpc.CallOption) (*DeleteEventHandlerFrontendReply, error)
	// Event handler frontend type API
	CreateEventHandlerFrontendType(ctx context.Context, in *CreateEventHandlerFrontendTypeRequest, opts ...grpc.CallOption) (*CreateEventHandlerFrontendTypeReply, error)
	GetEventHandlerFrontendTypes(ctx context.Context, in *GetEventHandlerFrontendTypesRequest, opts ...grpc.CallOption) (KlessAPI_GetEventHandlerFrontendTypesClient, error)
	DeleteEventHandlerFrontendType(ctx context.Context, in *DeleteEventHandlerFrontendTypeRequest, opts ...grpc.CallOption) (*DeleteEventHandlerFrontendTypeReply, error)
}

type klessAPIClient struct {
	cc *grpc.ClientConn
}

func NewKlessAPIClient(cc *grpc.ClientConn) KlessAPIClient {
	return &klessAPIClient{cc}
}

func (c *klessAPIClient) GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionReply, error) {
	out := new(GetServerVersionReply)
	err := grpc.Invoke(ctx, "/klessserver.KlessAPI/GetServerVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *klessAPIClient) CreateEventHandler(ctx context.Context, in *CreateEventHandlerRequest, opts ...grpc.CallOption) (*CreateEventHandlerReply, error) {
	out := new(CreateEventHandlerReply)
	err := grpc.Invoke(ctx, "/klessserver.KlessAPI/CreateEventHandler", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *klessAPIClient) GetEventHandlers(ctx context.Context, in *GetEventHandlersRequest, opts ...grpc.CallOption) (KlessAPI_GetEventHandlersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KlessAPI_serviceDesc.Streams[0], c.cc, "/klessserver.KlessAPI/GetEventHandlers", opts...)
	if err != nil {
		return nil, err
	}
	x := &klessAPIGetEventHandlersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KlessAPI_GetEventHandlersClient interface {
	Recv() (*EventHandlerInformation, error)
	grpc.ClientStream
}

type klessAPIGetEventHandlersClient struct {
	grpc.ClientStream
}

func (x *klessAPIGetEventHandlersClient) Recv() (*EventHandlerInformation, error) {
	m := new(EventHandlerInformation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *klessAPIClient) GetEventHandlerStatistics(ctx context.Context, in *GetEventHandlerStatisticsRequest, opts ...grpc.CallOption) (KlessAPI_GetEventHandlerStatisticsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KlessAPI_serviceDesc.Streams[1], c.cc, "/klessserver.KlessAPI/GetEventHandlerStatistics", opts...)
	if err != nil {
		return nil, err
	}
	x := &klessAPIGetEventHandlerStatisticsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KlessAPI_GetEventHandlerStatisticsClient interface {
	Recv() (*EventHandlerStatisticsInformation, error)
	grpc.ClientStream
}

type klessAPIGetEventHandlerStatisticsClient struct {
	grpc.ClientStream
}

func (x *klessAPIGetEventHandlerStatisticsClient) Recv() (*EventHandlerStatisticsInformation, error) {
	m := new(EventHandlerStatisticsInformation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *klessAPIClient) DeleteEventHandler(ctx context.Context, in *DeleteEventHandlerRequest, opts ...grpc.CallOption) (*DeleteEventHandlerReply, error) {
	out := new(DeleteEventHandlerReply)
	err := grpc.Invoke(ctx, "/klessserver.KlessAPI/DeleteEventHandler", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *klessAPIClient) DescribeEventHandler(ctx context.Context, in *DescribeEventHandlerRequest, opts ...grpc.CallOption) (*DescribeEventHandlerReply, error) {
	out := new(DescribeEventHandlerReply)
	err := grpc.Invoke(ctx, "/klessserver.KlessAPI/DescribeEventHandler", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *klessAPIClient) CreateEventHandlerBuilder(ctx context.Context, in *CreateEventHandlerBuilderRequest, opts ...grpc.CallOption) (*CreateEventHandlerBuilderReply, error) {
	out := new(CreateEventHandlerBuilderReply)
	err := grpc.Invoke(ctx, "/klessserver.KlessAPI/CreateEventHandlerBuilder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *klessAPIClient) GetEventHandlerBuilders(ctx context.Context, in *GetEventHandlerBuildersRequest, opts ...grpc.CallOption) (KlessAPI_GetEventHandlerBuildersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KlessAPI_serviceDesc.Streams[2], c.cc, "/klessserver.KlessAPI/GetEventHandlerBuilders", opts...)
	if err != nil {
		return nil, err
	}
	x := &klessAPIGetEventHandlerBuildersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KlessAPI_GetEventHandlerBuildersClient interface {
	Recv() (*EventHandlerBuilderInformation, error)
	grpc.ClientStream
}

type klessAPIGetEventHandlerBuildersClient struct {
	grpc.ClientStream
}

func (x *klessAPIGetEventHandlerBuildersClient) Recv() (*EventHandlerBuilderInformation, error) {
	m := new(EventHandlerBuilderInformation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *klessAPIClient) DeleteEventHandlerBuilder(ctx context.Context, in *DeleteEventHandlerBuilderRequest, opts ...grpc.CallOption) (*DeleteEventHandlerBuilderReply, error) {
	out := new(DeleteEventHandlerBuilderReply)
	err := grpc.Invoke(ctx, "/klessserver.KlessAPI/DeleteEventHandlerBuilder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *klessAPIClient) CreateEventHandlerFrontend(ctx context.Context, in *CreateEventHandlerFrontendRequest, opts ...grpc.CallOption) (*CreateEventHandlerFrontendReply, error) {
	out := new(CreateEventHandlerFrontendReply)
	err := grpc.Invoke(ctx, "/klessserver.KlessAPI/CreateEventHandlerFrontend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *klessAPIClient) GetEventHandlerFrontends(ctx context.Context, in *GetEventHandlerFrontendsRequest, opts ...grpc.CallOption) (KlessAPI_GetEventHandlerFrontendsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KlessAPI_serviceDesc.Streams[3], c.cc, "/klessserver.KlessAPI/GetEventHandlerFrontends", opts...)
	if err != nil {
		return nil, err
	}
	x := &klessAPIGetEventHandlerFrontendsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KlessAPI_GetEventHandlerFrontendsClient interface {
	Recv() (*FrontendInformation, error)
	grpc.ClientStream
}

type klessAPIGetEventHandlerFrontendsClient struct {
	grpc.ClientStream
}

func (x *klessAPIGetEventHandlerFrontendsClient) Recv() (*FrontendInformation, error) {
	m := new(FrontendInformation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *klessAPIClient) DeleteEventHandlerFrontend(ctx context.Context, in *DeleteEventHandlerFrontendRequest, opts ...grpc.CallOption) (*DeleteEventHandlerFrontendReply, error) {
	out := new(DeleteEventHandlerFrontendReply)
	err := grpc.Invoke(ctx, "/klessserver.KlessAPI/DeleteEventHandlerFrontend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *klessAPIClient) CreateEventHandlerFrontendType(ctx context.Context, in *CreateEventHandlerFrontendTypeRequest, opts ...grpc.CallOption) (*CreateEventHandlerFrontendTypeReply, error) {
	out := new(CreateEventHandlerFrontendTypeReply)
	err := grpc.Invoke(ctx, "/klessserver.KlessAPI/CreateEventHandlerFrontendType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *klessAPIClient) GetEventHandlerFrontendTypes(ctx context.Context, in *GetEventHandlerFrontendTypesRequest, opts ...grpc.CallOption) (KlessAPI_GetEventHandlerFrontendTypesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KlessAPI_serviceDesc.Streams[4], c.cc, "/klessserver.KlessAPI/GetEventHandlerFrontendTypes", opts...)
	if err != nil {
		return nil, err
	}
	x := &klessAPIGetEventHandlerFrontendTypesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KlessAPI_GetEventHandlerFrontendTypesClient interface {
	Recv() (*FrontendTypeInformation, error)
	grpc.ClientStream
}

type klessAPIGetEventHandlerFrontendTypesClient struct {
	grpc.ClientStream
}

func (x *klessAPIGetEventHandlerFrontendTypesClient) Recv() (*FrontendTypeInformation, error) {
	m := new(FrontendTypeInformation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *klessAPIClient) DeleteEventHandlerFrontendType(ctx context.Context, in *DeleteEventHandlerFrontendTypeRequest, opts ...grpc.CallOption) (*DeleteEventHandlerFrontendTypeReply, error) {
	out := new(DeleteEventHandlerFrontendTypeReply)
	err := grpc.Invoke(ctx, "/klessserver.KlessAPI/DeleteEventHandlerFrontendType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KlessAPI service

type KlessAPIServer interface {
	// Version API
	GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionReply, error)
	// Event handler API
	CreateEventHandler(context.Context, *CreateEventHandlerRequest) (*CreateEventHandlerReply, error)
	GetEventHandlers(*GetEventHandlersRequest, KlessAPI_GetEventHandlersServer) error
	GetEventHandlerStatistics(*GetEventHandlerStatisticsRequest, KlessAPI_GetEventHandlerStatisticsServer) error
	DeleteEventHandler(context.Context, *DeleteEventHandlerRequest) (*DeleteEventHandlerReply, error)
	DescribeEventHandler(context.Context, *DescribeEventHandlerRequest) (*DescribeEventHandlerReply, error)
	// Event handler builder API
	CreateEventHandlerBuilder(context.Context, *CreateEventHandlerBuilderRequest) (*CreateEventHandlerBuilderReply, error)
	GetEventHandlerBuilders(*GetEventHandlerBuildersRequest, KlessAPI_GetEventHandlerBuildersServer) error
	DeleteEventHandlerBuilder(context.Context, *DeleteEventHandlerBuilderRequest) (*DeleteEventHandlerBuilderReply, error)
	// Event handler frontend API
	CreateEventHandlerFrontend(context.Context, *CreateEventHandlerFrontendRequest) (*CreateEventHandlerFrontendReply, error)
	GetEventHandlerFrontends(*GetEventHandlerFrontendsRequest, KlessAPI_GetEventHandlerFrontendsServer) error
	DeleteEventHandlerFrontend(context.Context, *DeleteEventHandlerFrontendRequest) (*DeleteEventHandlerFrontendReply, error)
	// Event handler frontend type API
	CreateEventHandlerFrontendType(context.Context, *CreateEventHandlerFrontendTypeRequest) (*CreateEventHandlerFrontendTypeReply, error)
	GetEventHandlerFrontendTypes(*GetEventHandlerFrontendTypesRequest, KlessAPI_GetEventHandlerFrontendTypesServer) error
	DeleteEventHandlerFrontendType(context.Context, *DeleteEventHandlerFrontendTypeRequest) (*DeleteEventHandlerFrontendTypeReply, error)
}

func RegisterKlessAPIServer(s *grpc.Server, srv KlessAPIServer) {
	s.RegisterService(&_KlessAPI_serviceDesc, srv)
}

func _KlessAPI_GetServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlessAPIServer).GetServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/klessserver.KlessAPI/GetServerVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlessAPIServer).GetServerVersion(ctx, req.(*GetServerVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KlessAPI_CreateEventHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlessAPIServer).CreateEventHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/klessserver.KlessAPI/CreateEventHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlessAPIServer).CreateEventHandler(ctx, req.(*CreateEventHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KlessAPI_GetEventHandlers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventHandlersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KlessAPIServer).GetEventHandlers(m, &klessAPIGetEventHandlersServer{stream})
}

type KlessAPI_GetEventHandlersServer interface {
	Send(*EventHandlerInformation) error
	grpc.ServerStream
}

type klessAPIGetEventHandlersServer struct {
	grpc.ServerStream
}

func (x *klessAPIGetEventHandlersServer) Send(m *EventHandlerInformation) error {
	return x.ServerStream.SendMsg(m)
}

func _KlessAPI_GetEventHandlerStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventHandlerStatisticsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KlessAPIServer).GetEventHandlerStatistics(m, &klessAPIGetEventHandlerStatisticsServer{stream})
}

type KlessAPI_GetEventHandlerStatisticsServer interface {
	Send(*EventHandlerStatisticsInformation) error
	grpc.ServerStream
}

type klessAPIGetEventHandlerStatisticsServer struct {
	grpc.ServerStream
}

func (x *klessAPIGetEventHandlerStatisticsServer) Send(m *EventHandlerStatisticsInformation) error {
	return x.ServerStream.SendMsg(m)
}

func _KlessAPI_DeleteEventHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlessAPIServer).DeleteEventHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/klessserver.KlessAPI/DeleteEventHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlessAPIServer).DeleteEventHandler(ctx, req.(*DeleteEventHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KlessAPI_DescribeEventHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeEventHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlessAPIServer).DescribeEventHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/klessserver.KlessAPI/DescribeEventHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlessAPIServer).DescribeEventHandler(ctx, req.(*DescribeEventHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KlessAPI_CreateEventHandlerBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventHandlerBuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlessAPIServer).CreateEventHandlerBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/klessserver.KlessAPI/CreateEventHandlerBuilder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlessAPIServer).CreateEventHandlerBuilder(ctx, req.(*CreateEventHandlerBuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KlessAPI_GetEventHandlerBuilders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventHandlerBuildersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KlessAPIServer).GetEventHandlerBuilders(m, &klessAPIGetEventHandlerBuildersServer{stream})
}

type KlessAPI_GetEventHandlerBuildersServer interface {
	Send(*EventHandlerBuilderInformation) error
	grpc.ServerStream
}

type klessAPIGetEventHandlerBuildersServer struct {
	grpc.ServerStream
}

func (x *klessAPIGetEventHandlerBuildersServer) Send(m *EventHandlerBuilderInformation) error {
	return x.ServerStream.SendMsg(m)
}

func _KlessAPI_DeleteEventHandlerBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventHandlerBuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlessAPIServer).DeleteEventHandlerBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/klessserver.KlessAPI/DeleteEventHandlerBuilder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlessAPIServer).DeleteEventHandlerBuilder(ctx, req.(*DeleteEventHandlerBuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KlessAPI_CreateEventHandlerFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventHandlerFrontendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlessAPIServer).CreateEventHandlerFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/klessserver.KlessAPI/CreateEventHandlerFrontend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlessAPIServer).CreateEventHandlerFrontend(ctx, req.(*CreateEventHandlerFrontendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KlessAPI_GetEventHandlerFrontends_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventHandlerFrontendsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KlessAPIServer).GetEventHandlerFrontends(m, &klessAPIGetEventHandlerFrontendsServer{stream})
}

type KlessAPI_GetEventHandlerFrontendsServer interface {
	Send(*FrontendInformation) error
	grpc.ServerStream
}

type klessAPIGetEventHandlerFrontendsServer struct {
	grpc.ServerStream
}

func (x *klessAPIGetEventHandlerFrontendsServer) Send(m *FrontendInformation) error {
	return x.ServerStream.SendMsg(m)
}

func _KlessAPI_DeleteEventHandlerFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventHandlerFrontendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlessAPIServer).DeleteEventHandlerFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/klessserver.KlessAPI/DeleteEventHandlerFrontend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlessAPIServer).DeleteEventHandlerFrontend(ctx, req.(*DeleteEventHandlerFrontendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KlessAPI_CreateEventHandlerFrontendType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventHandlerFrontendTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlessAPIServer).CreateEventHandlerFrontendType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/klessserver.KlessAPI/CreateEventHandlerFrontendType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlessAPIServer).CreateEventHandlerFrontendType(ctx, req.(*CreateEventHandlerFrontendTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KlessAPI_GetEventHandlerFrontendTypes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventHandlerFrontendTypesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KlessAPIServer).GetEventHandlerFrontendTypes(m, &klessAPIGetEventHandlerFrontendTypesServer{stream})
}

type KlessAPI_GetEventHandlerFrontendTypesServer interface {
	Send(*FrontendTypeInformation) error
	grpc.ServerStream
}

type klessAPIGetEventHandlerFrontendTypesServer struct {
	grpc.ServerStream
}

func (x *klessAPIGetEventHandlerFrontendTypesServer) Send(m *FrontendTypeInformation) error {
	return x.ServerStream.SendMsg(m)
}

func _KlessAPI_DeleteEventHandlerFrontendType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventHandlerFrontendTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlessAPIServer).DeleteEventHandlerFrontendType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/klessserver.KlessAPI/DeleteEventHandlerFrontendType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlessAPIServer).DeleteEventHandlerFrontendType(ctx, req.(*DeleteEventHandlerFrontendTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KlessAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "klessserver.KlessAPI",
	HandlerType: (*KlessAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerVersion",
			Handler:    _KlessAPI_GetServerVersion_Handler,
		},
		{
			MethodName: "CreateEventHandler",
			Handler:    _KlessAPI_CreateEventHandler_Handler,
		},
		{
			MethodName: "DeleteEventHandler",
			Handler:    _KlessAPI_DeleteEventHandler_Handler,
		},
		{
			MethodName: "DescribeEventHandler",
			Handler:    _KlessAPI_DescribeEventHandler_Handler,
		},
		{
			MethodName: "CreateEventHandlerBuilder",
			Handler:    _KlessAPI_CreateEventHandlerBuilder_Handler,
		},
		{
			MethodName: "DeleteEventHandlerBuilder",
			Handler:    _KlessAPI_DeleteEventHandlerBuilder_Handler,
		},
		{
			MethodName: "CreateEventHandlerFrontend",
			Handler:    _KlessAPI_CreateEventHandlerFrontend_Handler,
		},
		{
			MethodName: "DeleteEventHandlerFrontend",
			Handler:    _KlessAPI_DeleteEventHandlerFrontend_Handler,
		},
		{
			MethodName: "CreateEventHandlerFrontendType",
			Handler:    _KlessAPI_CreateEventHandlerFrontendType_Handler,
		},
		{
			MethodName: "DeleteEventHandlerFrontendType",
			Handler:    _KlessAPI_DeleteEventHandlerFrontendType_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEventHandlers",
			Handler:       _KlessAPI_GetEventHandlers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEventHandlerStatistics",
			Handler:       _KlessAPI_GetEventHandlerStatistics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEventHandlerBuilders",
			Handler:       _KlessAPI_GetEventHandlerBuilders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEventHandlerFrontends",
			Handler:       _KlessAPI_GetEventHandlerFrontends_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEventHandlerFrontendTypes",
			Handler:       _KlessAPI_GetEventHandlerFrontendTypes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "klessserver.proto",
}

func init() { proto.RegisterFile("klessserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x59, 0xcd, 0x6f, 0xdc, 0x44,
	0x14, 0x5f, 0xef, 0x6e, 0x92, 0xdd, 0x97, 0x14, 0x85, 0x69, 0x4a, 0x1c, 0x37, 0xda, 0x6c, 0x9c,
	0x34, 0x8a, 0x68, 0xbb, 0x8a, 0xc2, 0x87, 0xaa, 0x2a, 0x01, 0x92, 0x26, 0x2d, 0x51, 0x11, 0xa4,
	0xde, 0xc2, 0xb1, 0x92, 0xb3, 0x3b, 0x95, 0x4c, 0x77, 0xed, 0xc5, 0xf6, 0x06, 0x6d, 0x55, 0x71,
	0xe6, 0xc6, 0x19, 0x09, 0xc4, 0x81, 0x03, 0x17, 0x2e, 0xfc, 0x0d, 0x9c, 0x38, 0x70, 0x46, 0xfd,
	0x03, 0x38, 0x73, 0xe0, 0xca, 0x01, 0x79, 0x6c, 0x27, 0xe3, 0xf1, 0x7c, 0xd8, 0x14, 0x45, 0xd0,
	0xdb, 0xfa, 0x7d, 0xcc, 0x9b, 0xf7, 0xde, 0xef, 0xbd, 0x37, 0x33, 0x0b, 0xaf, 0x3e, 0x19, 0xe0,
	0x20, 0x08, 0xb0, 0x7f, 0x8a, 0xfd, 0xce, 0xc8, 0xf7, 0x42, 0x0f, 0xcd, 0x52, 0x24, 0xf3, 0x5d,
	0x58, 0xbc, 0x87, 0xc3, 0x2e, 0xf9, 0xf8, 0x04, 0xfb, 0x81, 0xe3, 0xb9, 0x16, 0xfe, 0x6c, 0x8c,
	0x83, 0x10, 0xad, 0xc3, 0xa5, 0xde, 0xc0, 0xc1, 0x6e, 0x78, 0x1a, 0xd3, 0x75, 0xad, 0xad, 0x6d,
	0x36, 0xad, 0x2c, 0xd1, 0xdc, 0x85, 0x2b, 0xf9, 0x05, 0x46, 0x83, 0x49, 0xa4, 0x1e, 0xdb, 0x60,
	0xd4, 0x33, 0x44, 0xf3, 0x97, 0x3a, 0x2c, 0xdd, 0xf1, 0xb1, 0x1d, 0xe2, 0xc3, 0x53, 0xec, 0x86,
	0xef, 0xdb, 0x6e, 0x7f, 0x80, 0xfd, 0x52, 0x5b, 0x40, 0xaf, 0xc3, 0x3c, 0xa6, 0x94, 0x3f, 0xb4,
	0x87, 0x58, 0xaf, 0x12, 0xc1, 0x1c, 0x1d, 0xbd, 0x09, 0x57, 0x58, 0x5a, 0x30, 0xb2, 0x7b, 0x58,
	0xaf, 0x11, 0x05, 0x3e, 0x13, 0x6d, 0xc1, 0x65, 0x9a, 0xb1, 0x3f, 0x76, 0x06, 0x7d, 0xec, 0xeb,
	0x75, 0xa2, 0xc3, 0x63, 0xa1, 0xb7, 0xe1, 0x35, 0x9a, 0xdc, 0xf5, 0xc6, 0x7e, 0x0f, 0xdf, 0xf1,
	0xfa, 0x58, 0x9f, 0x6a, 0x6b, 0x9b, 0x73, 0x96, 0x80, 0x8b, 0x76, 0x60, 0x89, 0xcf, 0xf9, 0xd8,
	0xfa, 0x40, 0x9f, 0x26, 0xf6, 0xc4, 0x02, 0xec, 0x3e, 0x93, 0x7c, 0xe8, 0x33, 0xf9, 0x7d, 0x26,
	0x2c, 0xb4, 0x0d, 0x0b, 0x34, 0xf9, 0xae, 0xef, 0xb9, 0x21, 0x76, 0xfb, 0x7a, 0x83, 0xa8, 0x70,
	0x79, 0xe8, 0x36, 0xe8, 0x34, 0xfd, 0x00, 0x8f, 0xb0, 0xdb, 0xc7, 0x6e, 0xcf, 0xc1, 0x81, 0xde,
	0x24, 0xde, 0x09, 0xf9, 0xe8, 0x3d, 0xb8, 0x2a, 0xe2, 0x45, 0x1e, 0x02, 0x31, 0x2b, 0x13, 0x41,
	0x3a, 0xcc, 0xf4, 0xbc, 0xe1, 0x10, 0xbb, 0xa1, 0x3e, 0x4b, 0xa4, 0xd3, 0x4f, 0xf3, 0x2d, 0x58,
	0xe4, 0x41, 0x29, 0x02, 0xa3, 0x01, 0x0d, 0x1f, 0x07, 0x23, 0xcf, 0x0d, 0x70, 0x82, 0xa1, 0xb3,
	0x6f, 0x73, 0x4c, 0x4a, 0x80, 0xd6, 0x09, 0xca, 0xe1, 0x4f, 0x88, 0xa9, 0xaa, 0x04, 0x53, 0xe6,
	0xaf, 0x35, 0x58, 0xa4, 0x8d, 0x1e, 0xb9, 0x8f, 0x3d, 0x7f, 0x68, 0x87, 0xd1, 0x8a, 0x1b, 0xf0,
	0x0a, 0xad, 0x74, 0xd4, 0x4f, 0x0c, 0x33, 0xd4, 0x8b, 0x47, 0x7e, 0x8a, 0xa8, 0xba, 0x18, 0x51,
	0x82, 0x5a, 0x99, 0x2a, 0x5c, 0x2b, 0x09, 0xf9, 0x1c, 0xf0, 0x02, 0x6e, 0x94, 0xd4, 0xc7, 0x29,
	0x5e, 0x63, 0x88, 0x9f, 0x7d, 0xd3, 0x28, 0x69, 0x64, 0x50, 0x82, 0xda, 0x30, 0x7b, 0x12, 0xad,
	0xd1, 0x0d, 0xed, 0x70, 0x1c, 0x03, 0xb6, 0x69, 0xd1, 0x24, 0x36, 0x52, 0x7b, 0xa7, 0xb6, 0x33,
	0xb0, 0x4f, 0x06, 0x38, 0x41, 0x27, 0x9f, 0x69, 0xfe, 0xa5, 0x41, 0x9b, 0xc1, 0x51, 0xb4, 0x9e,
	0x13, 0x84, 0x4e, 0xef, 0x22, 0x00, 0xc5, 0x05, 0x43, 0x4d, 0x00, 0x86, 0x65, 0x68, 0x06, 0xa1,
	0xed, 0x87, 0x0f, 0x9d, 0x21, 0x4e, 0x92, 0x79, 0x4e, 0x88, 0x82, 0x87, 0xdd, 0x3e, 0xe1, 0xc5,
	0x69, 0x4b, 0x3f, 0x23, 0x4e, 0x30, 0x1e, 0x0e, 0x6d, 0x7f, 0x42, 0x72, 0xd3, 0xb0, 0xd2, 0x4f,
	0xf3, 0x79, 0x15, 0x56, 0xf9, 0xbe, 0xd3, 0xc0, 0x5e, 0x86, 0x66, 0xe8, 0x0c, 0x71, 0x10, 0xda,
	0xc3, 0x51, 0xe2, 0xfb, 0x39, 0xe1, 0x3f, 0x09, 0x67, 0x1d, 0x66, 0x46, 0x5e, 0x9f, 0x6c, 0x25,
	0x89, 0x45, 0xf2, 0x19, 0x01, 0xc9, 0x8f, 0xd3, 0xda, 0x75, 0x9e, 0x62, 0x12, 0x8f, 0x9a, 0x45,
	0x93, 0x90, 0x09, 0x73, 0x69, 0x97, 0x21, 0x22, 0x33, 0x44, 0x24, 0x43, 0xa3, 0x65, 0x48, 0xc0,
	0x1b, 0x59, 0x99, 0x88, 0x66, 0xfe, 0xa1, 0xc1, 0xd2, 0x01, 0x1e, 0xe0, 0xff, 0xd5, 0x90, 0x2c,
	0x16, 0xdb, 0xb4, 0x48, 0xa7, 0x72, 0xad, 0x9c, 0xe7, 0xb0, 0xaa, 0x95, 0xff, 0xa6, 0xc1, 0xd5,
	0x03, 0x1c, 0xf4, 0x7c, 0xe7, 0xe4, 0xe5, 0x0a, 0x95, 0xf9, 0x9c, 0x40, 0x80, 0xe7, 0x99, 0x22,
	0x26, 0xe8, 0x11, 0x2c, 0x62, 0xfe, 0x98, 0x21, 0x4e, 0xcd, 0x6e, 0xaf, 0x77, 0xe8, 0x33, 0xa2,
	0x60, 0x24, 0x59, 0xa2, 0x45, 0x50, 0x0b, 0x20, 0x38, 0x3f, 0xdd, 0xd4, 0xc8, 0xfc, 0xa7, 0x28,
	0x67, 0xfd, 0xf6, 0xa3, 0x71, 0x38, 0x1a, 0x87, 0xc4, 0xc7, 0x39, 0x8b, 0x26, 0x99, 0x3f, 0xd7,
	0xa0, 0x9d, 0x1f, 0xdc, 0x49, 0xa3, 0x2f, 0x97, 0xba, 0x5b, 0x59, 0x67, 0x93, 0x35, 0xa8, 0x0c,
	0x8a, 0xd8, 0x92, 0x21, 0x54, 0x93, 0x0e, 0xa1, 0xaf, 0x35, 0x68, 0x71, 0x58, 0x74, 0x98, 0xeb,
	0xed, 0xda, 0xe6, 0xec, 0xf6, 0x83, 0x4c, 0x98, 0x55, 0xfe, 0x76, 0x0e, 0xa5, 0x6b, 0x1e, 0xba,
	0xa1, 0x3f, 0xb1, 0x14, 0x86, 0xc5, 0xf5, 0x65, 0x3c, 0x80, 0xb5, 0x02, 0x06, 0xd0, 0x3c, 0xd4,
	0x9e, 0xe0, 0x49, 0x12, 0xea, 0xe8, 0x27, 0x5a, 0x80, 0xa9, 0x53, 0x7b, 0x30, 0x8e, 0xc3, 0x39,
	0x67, 0xc5, 0x1f, 0xb7, 0xab, 0xb7, 0x34, 0x73, 0x07, 0x5a, 0x12, 0xa7, 0x54, 0x95, 0x7b, 0x17,
	0x5a, 0xcc, 0xf0, 0x4c, 0x54, 0xcb, 0x8d, 0x4e, 0xf3, 0x47, 0x0d, 0x5a, 0x72, 0xcf, 0x64, 0x18,
	0xd1, 0xfe, 0x29, 0x46, 0xaa, 0x52, 0x8c, 0x50, 0x79, 0xa8, 0x65, 0xfb, 0xdc, 0x37, 0x1a, 0xb4,
	0xf3, 0x8d, 0xee, 0x82, 0xa1, 0x2f, 0xde, 0xde, 0x0e, 0xb4, 0x24, 0xbb, 0x53, 0xe5, 0xf4, 0xab,
	0x3a, 0xac, 0xe6, 0x21, 0x91, 0x5e, 0x23, 0xca, 0x79, 0xc7, 0xdc, 0x39, 0xd2, 0x45, 0x28, 0xf7,
	0x84, 0x7c, 0x91, 0xee, 0xc3, 0xc9, 0x28, 0x6d, 0xd3, 0x42, 0x3e, 0xfa, 0x56, 0x83, 0x15, 0x1e,
	0x33, 0x5f, 0xdf, 0x5d, 0x45, 0x7d, 0x33, 0x7e, 0x77, 0x0e, 0xe5, 0xab, 0xc6, 0x15, 0xae, 0xb2,
	0x8d, 0xde, 0x01, 0x83, 0x27, 0xd2, 0xc5, 0x3d, 0x1f, 0xa7, 0x55, 0x2f, 0x91, 0xa0, 0x73, 0x3f,
	0x9d, 0x6d, 0x11, 0x16, 0xac, 0x17, 0xd9, 0xa2, 0xaa, 0x47, 0x34, 0xe9, 0x1e, 0xb1, 0x0b, 0x2b,
	0xb2, 0xc0, 0xa8, 0x00, 0x75, 0x0f, 0x56, 0x98, 0x26, 0x91, 0xea, 0x96, 0xec, 0x12, 0x3f, 0x68,
	0x70, 0x99, 0x17, 0x4d, 0x19, 0xca, 0xb4, 0x17, 0x40, 0x59, 0x55, 0x81, 0x32, 0x71, 0x05, 0x7e,
	0xa7, 0xc1, 0x6a, 0xbe, 0x04, 0x2f, 0xbe, 0x86, 0xc4, 0x3b, 0xdc, 0x85, 0x15, 0xd9, 0x06, 0x55,
	0x39, 0xfd, 0x5d, 0x83, 0x6b, 0x62, 0x4c, 0x44, 0xd1, 0xf9, 0x57, 0x9c, 0x2c, 0x94, 0x06, 0xe6,
	0x71, 0x82, 0xe6, 0x9d, 0x1f, 0x04, 0x64, 0x22, 0x74, 0x98, 0xea, 0xd9, 0x30, 0xed, 0xc1, 0x9a,
	0xca, 0x4d, 0x55, 0xa8, 0xee, 0xc3, 0x9a, 0x00, 0xfe, 0x91, 0x7e, 0xc9, 0x12, 0xf8, 0x49, 0x83,
	0x45, 0x5a, 0xbd, 0x40, 0x19, 0x90, 0x18, 0x6a, 0x2f, 0x16, 0xc3, 0x6a, 0xa9, 0x18, 0x32, 0x50,
	0xfb, 0x5e, 0x83, 0x6b, 0x62, 0xac, 0x5d, 0x2c, 0x56, 0xc4, 0xbb, 0xdc, 0x83, 0x35, 0xd5, 0x26,
	0x15, 0x99, 0xde, 0xfe, 0xf3, 0x12, 0x34, 0xee, 0x47, 0xd3, 0x64, 0xef, 0xf8, 0x08, 0x3d, 0x82,
	0x79, 0xf6, 0x85, 0x15, 0x65, 0xcf, 0xec, 0x82, 0x17, 0x5c, 0xc3, 0x54, 0x48, 0x8d, 0x06, 0x13,
	0xb3, 0x82, 0xfa, 0x80, 0xf2, 0xc8, 0x44, 0x1b, 0x8a, 0x71, 0x96, 0xda, 0x58, 0x57, 0xca, 0xc5,
	0x56, 0x4e, 0x88, 0x17, 0x99, 0x57, 0xb6, 0xbc, 0x17, 0xbc, 0x47, 0x38, 0xa3, 0xd0, 0xfd, 0xc4,
	0xac, 0x6c, 0x69, 0xe8, 0x0b, 0x58, 0x12, 0xbe, 0xc0, 0xa0, 0x9b, 0x32, 0x63, 0xb9, 0x97, 0x1a,
	0xa3, 0x23, 0xb4, 0xca, 0x7d, 0xd9, 0x20, 0xf6, 0xfb, 0x80, 0xf2, 0x99, 0x67, 0x22, 0x29, 0xbc,
	0xc7, 0x33, 0x7e, 0x0a, 0xae, 0xbf, 0x66, 0x05, 0x7d, 0x0a, 0x0b, 0xbc, 0x9b, 0x20, 0xda, 0x64,
	0xf4, 0x85, 0xd7, 0x60, 0x63, 0xa3, 0x80, 0x64, 0x6c, 0x6b, 0xc2, 0x7b, 0x9d, 0x4f, 0xdf, 0xed,
	0x6e, 0x96, 0xba, 0xd1, 0x18, 0xd7, 0x8b, 0x8a, 0xc7, 0xa6, 0x3f, 0xcf, 0x3d, 0xcb, 0xa6, 0x37,
	0x02, 0x74, 0x5d, 0x96, 0x4a, 0xe6, 0xde, 0xc0, 0x98, 0x95, 0xdf, 0x0d, 0x48, 0x16, 0x27, 0xbc,
	0xc7, 0x16, 0xbe, 0xcf, 0xaa, 0xa3, 0x3b, 0x63, 0x5c, 0x7e, 0x96, 0x36, 0x2b, 0xe8, 0x19, 0x18,
	0xe2, 0x21, 0x81, 0x3a, 0xe5, 0x4e, 0x98, 0xc6, 0x8d, 0xc2, 0xf2, 0xb1, 0x75, 0x17, 0x74, 0xd1,
	0xf1, 0x0a, 0xdd, 0x90, 0x85, 0x9c, 0x3d, 0x85, 0x19, 0xed, 0x8c, 0x34, 0xe7, 0xa4, 0x45, 0x02,
	0xfd, 0x0c, 0x0c, 0x71, 0xa3, 0x64, 0xbc, 0x55, 0x9e, 0x81, 0x18, 0x6f, 0x15, 0x47, 0x12, 0xb3,
	0x82, 0xbe, 0xd4, 0x78, 0x17, 0xd6, 0x4c, 0x8f, 0xdf, 0x2e, 0x18, 0x40, 0x6a, 0xf2, 0x18, 0x5b,
	0xa5, 0x74, 0xe2, 0xad, 0x3c, 0x85, 0x65, 0xd9, 0x60, 0x47, 0x5b, 0x45, 0x82, 0x4f, 0x9f, 0x01,
	0x98, 0x5e, 0x22, 0x98, 0xf3, 0x24, 0x09, 0x51, 0x18, 0xe4, 0xe3, 0x8a, 0x09, 0x43, 0xa1, 0x01,
	0xcc, 0x84, 0xa1, 0xc0, 0x3c, 0x34, 0x2b, 0xfb, 0x2d, 0x68, 0x38, 0x5e, 0xac, 0xb7, 0x3f, 0x4f,
	0xc6, 0x5f, 0x3c, 0xaf, 0x8e, 0x7d, 0x2f, 0xf4, 0x8e, 0xb5, 0x93, 0x69, 0xf2, 0xff, 0xe5, 0x1b,
	0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x94, 0xe5, 0xc5, 0xd4, 0x1c, 0x00, 0x00,
}
